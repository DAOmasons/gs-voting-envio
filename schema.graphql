type FactoryEventsSummary {
  id: ID!
  address: String!
  admins: [String!]!
  contestTemplateCount: BigInt!
  moduleTemplateCount: BigInt!
  moduleCloneCount: BigInt!
  contestBuiltCount: BigInt!
  ContestCloneCount: BigInt!
}

type ContestTemplate {
  id: ID!
  contestVersion: String!
  contestAddress: String!
  mdProtocol: BigInt!
  mdPointer: String!
  active: Boolean!
}

type ModuleTemplate {
  id: ID!
  moduleName: String!
  templateAddress: String!
  mdProtocol: BigInt!
  mdPointer: String!
  active: Boolean!
}

type StemModule {
  id: ID!
  moduleAddress: String!
  contestAddress: String
  contest: Contest
  moduleName: String!
  moduleTemplate: ModuleTemplate!
  filterTag: String!
}

type ContestClone {
  id: ID!
  contestAddress: String!
  contestVersion: String!
  filterTag: String!
}

type Contest {
  id: ID!
  contestAddress: String!
  contestVersion: String!
  filterTag: String!
  contestStatus: BigInt!
  votesModule: StemModule!
  pointsModule: StemModule!
  executionModule: StemModule!
  choicesModule: StemModule!
  isContinuous: Boolean!
  isRetractable: Boolean!
}

type LocalLog {
  id: ID!
  message: String
}

# Grant Ships Schema

type HALParams {
  id: ID!
  hatId: BigInt!
  hatsAddress: String!
}

type TVParams {
  id: ID!
  voteDuration: BigInt!
}

type ERCPointParams {
  id: ID!
  voteTokenAddress: String!
  votingCheckpoint: BigInt!
}

type ShipChoice {
  id: ID!
  contest: GrantShipsVoting!
  mdProtocol: BigInt!
  mdPointer: String!
  choiceData: Bytes!
  active: Boolean!
  voteTally: BigInt!
  votes: [ShipVote!]! @derivedFrom(field: "choice")
}

type ShipVote {
  id: ID!
  choice: ShipChoice!
  voter: String!
  amount: BigInt!
  contest: GrantShipsVoting!
  mdPointer: String!
  mdProtocol: BigInt!
  isRectractVote: Boolean!
}

type GrantShipsVoting {
  id: ID!
  contest: Contest!
  hatId: BigInt!
  hatsAddress: String!
  voteTokenAddress: String!
  votingCheckpoint: BigInt!
  voteDuration: BigInt!
  startTime: BigInt
  endTime: BigInt
  totalVotes: BigInt!
  choices: [ShipChoice!]! @derivedFrom(field: "contest")
  votes: [ShipVote!]! @derivedFrom(field: "contest")
}

type Transaction {
  id: ID!
  blockNumber: BigInt!
  srcAddress: String!
  txOrigin: String
  txHash: Bytes!
}

type Record {
  id: ID!
  tag: String!
  nonce: Bytes!
  hatId: BigInt!
  mdProtocol: BigInt!
  mdPointer: String!
  hatsPoster: HatsPoster!
}

type EventPost {
  id: ID!
  tag: String!
  hatId: BigInt!
  mdProtocol: BigInt!
  mdPointer: String!
  hatsPoster: HatsPoster!
}

type HatsPoster {
  id: ID!
  hatIds: [BigInt!]!
  hatsAddress: String!
  record: [Record!]! @derivedFrom(field: "hatsPoster")
  eventPosts: [EventPost!]! @derivedFrom(field: "hatsPoster")
}
